# Structure for an item which stores weight and
# corresponding value of Item
class Item:
    def __init__(self, profit, weight):
        self.profit = profit
        self.weight = weight

# Main greedy function to solve the problem
def fractionalKnapsack(W, arr):
    # Sorting Items based on the profit-to-weight ratio
    arr.sort(key=lambda x: (x.profit / x.weight), reverse=True)

    # Result (value in Knapsack)
    finalvalue = 0.0

    # Looping through all Items
    for item in arr:
        # If adding Item won't overflow the Knapsack, add it completely
        if item.weight <= W:
            W -= item.weight
            finalvalue += item.profit
        # If we can't add the current Item completely, add a fractional part of it
        else:
            finalvalue += item.profit * W / item.weight
            break

    # Returning the final value
    return finalvalue

# Driver Code
if __name__ == "__main":
    # Take user input for the Knapsack capacity
    W = float(input("Enter the Knapsack capacity (W): "))

    # Take user input for the list of items
    n = int(input("Enter the number of items: "))
    arr = []
    for i in range(n):
        profit = float(input("Enter profit for item {}:".format(i + 1))
        weight = float(input("Enter weight for item {}:".format(i + 1))
        arr.append(Item(profit, weight))

    # Function call
    max_val = fractionalKnapsack(W, arr)
    print("Maximum value in the Knapsack:", max_val)
